version: "3"
services:
  server:
    build:
      context: .
      args:
        NPM_LOG_LEVEL: notice
    ports:
      - ${PORT}:3000
    environment:
      BCRYPT_SALT: ${BCRYPT_SALT}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
      DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      - migrate
    restart: on-failure
  migrate:
    build:
      context: .
      args:
        NPM_LOG_LEVEL: notice
    command: npm run db:init
    working_dir: /app/server
    environment:
      BCRYPT_SALT: ${BCRYPT_SALT}
      DB_URL: postgres://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:12
    restart: always
    ports:
      - ${DB_PORT}:5432
    environment:
      MSSQL_SA_PASSWORD: ${DB_PASSWORD}
      ACCEPT_EULA: Y
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
        - ping
        - -h
        - localhost
        - -u
        - ${DB_USER}
        - ${DB_PASSWORD}
        - -Q
        - SELECT 1
        - -b
        - -o
        - /dev/null
      timeout: 45s
      interval: 10s
      retries: 10
      start_period: 10s
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - postgres:/var/lib/postgresql/data
  adminer:
    image: adminer
    restart: always
    ports:
      - 1234:8080
volumes:
  mssql: ~
  mysql: ~
  postgres: ~
